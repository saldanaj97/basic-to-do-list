{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["List","props","items","map","item","index","key","App","onChange","event","setState","term","target","value","onSubmit","preventDefault","state","date","Date","this","timerID","setInterval","tick","clearInterval","className","toLocaleDateString","toLocaleTimeString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAUeA,G,MARF,SAAAC,GAAK,OACd,4BAEQA,EAAMC,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAAiB,wBAAIC,IAAKD,GAAQD,SCkE/CG,E,YAlEb,WAAYN,GAAO,IAAD,8BAChB,4CAAMA,KASRO,SAAW,SAACC,GACV,EAAKC,SAAS,CACZC,KAAMF,EAAMG,OAAOC,SAZL,EAoBlBC,SAAW,SAACL,GACVA,EAAMM,iBACN,EAAKL,SAAS,CACZC,KAAM,GACNT,MAAM,GAAD,mBAAM,EAAKc,MAAMd,OAAjB,CAAwB,EAAKc,MAAML,UAtB1C,EAAKK,MAAQ,CACXC,KAAM,IAAIC,KACVP,KAAM,GACNT,MAAO,IALO,E,iFA6BE,IAAD,OACjBiB,KAAKC,QAAUC,aACb,kBAAM,EAAKC,SACX,O,6CAMFC,cAAcJ,KAAKC,W,6BAKnBD,KAAKT,SAAS,CACZO,KAAM,IAAIC,S,+BAKZ,OACE,yBAAKM,UAAU,WACb,6CACA,iDACA,gDAAsBL,KAAKH,MAAMC,KAAKQ,sBACtC,gCAAMN,KAAKH,MAAMC,KAAKS,qBAAtB,KACA,6BACE,0BAAMF,UAAU,MAAMV,SAAUK,KAAKL,UACnC,2BAAOD,MAAOM,KAAKH,MAAML,KAAMH,SAAUW,KAAKX,WAC9C,2CAEF,kBAAC,EAAD,CAAMN,MAAOiB,KAAKH,MAAMd,c,GA7DhByB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.73bb5140.chunk.js","sourcesContent":["import React from 'react';\n\nconst List = props => (\n    <ul>\n        {\n            props.items.map((item, index) => <li key={index}>{item}</li>)\n        }\n    </ul>\n);\n\nexport default List;","import React, { Component } from 'react'; \nimport './App.css';\nimport List from './List';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      date: new Date(),               // Store the date\n      term: '',                       // Store what is being passed as a value to input\n      items: []                       // Store every value that is being passed to our to-do list\n    };\n  }\n\n  // Function which changes our state depending on the current input value\n  onChange = (event) => {\n    this.setState({\n      term: event.target.value\n    });\n  }\n\n  /* Function that cleans input field after submit is triggered, pushes\n   * every term to the arrray of items and the prevent default stops \n   * the default action of an element from happening \n  */\n  onSubmit = (event) => {\n    event.preventDefault()\n    this.setState({\n      term: '',\n      items: [...this.state.items, this.state.term]\n    });\n  }\n\n  // Set up the timer whenever app is rendered to the DOM for the first time\n  componentDidMount(){\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  // Clear the timer whenever the DOM produced by the App is removed \n  componentWillUnmount(){\n    clearInterval(this.timerID);\n  }\n\n  // Update the time every second\n  tick(){\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render(){\n    return(\n      <div className=\"Heading\">\n        <title>To-Do List</title>\n        <h1>Juan's To-Do List</h1>\n        <h2>Today's date is: {this.state.date.toLocaleDateString()}</h2>\n        <h2> {this.state.date.toLocaleTimeString()} </h2>\n        <div>\n          <form className=\"App\" onSubmit={this.onSubmit}>\n            <input value={this.state.term} onChange={this.onChange} />\n            <button>Submit</button>\n          </form>\n          <List items={this.state.items} />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nif(module.hot){\n    module.hot.accept();\n}\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}